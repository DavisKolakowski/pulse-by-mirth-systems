// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pulse.Core.Data;

#nullable disable

namespace Pulse.Services.DatabaseMigrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250610023956_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "follow_type", new[] { "tag", "venue" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "media_type", new[] { "photo", "video" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "notification_type", new[] { "new_special", "special_reminder", "venue_activity", "tag_activity", "system_alert", "welcome" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "address_standardizer");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "address_standardizer_data_us");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "plpgsql");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_raster");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_sfcgal");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_tiger_geocoder");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_topology");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pulse.Core.Data.Entities.ActivityThread", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<Instant>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_activity_threads");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_activity_threads_expires_at");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_activity_threads_venue_id");

                    b.HasIndex("VenueId", "IsActive")
                        .HasDatabaseName("ix_activity_threads_venue_id_is_active");

                    b.ToTable("activity_threads", (string)null);
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.BusinessHours", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<LocalTime?>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<int>("DayOfWeekId")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week_id");

                    b.Property<bool>("IsClosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_closed");

                    b.Property<LocalTime?>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_business_hours");

                    b.HasIndex("DayOfWeekId")
                        .HasDatabaseName("ix_business_hours_day_of_week_id");

                    b.HasIndex("VenueId", "DayOfWeekId")
                        .IsUnique()
                        .HasDatabaseName("ix_business_hours_venue_id_day_of_week_id");

                    b.ToTable("business_hours", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CloseTime = new NodaTime.LocalTime(15, 0),
                            DayOfWeekId = 1,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(10, 0),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 2,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 3,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 4,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 5,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 6,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 7,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            CloseTime = new NodaTime.LocalTime(23, 0),
                            DayOfWeekId = 1,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 2,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 3,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 11L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 4,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 5,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 13L,
                            CloseTime = new NodaTime.LocalTime(2, 0),
                            DayOfWeekId = 6,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 14L,
                            CloseTime = new NodaTime.LocalTime(2, 0),
                            DayOfWeekId = 7,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 15L,
                            CloseTime = new NodaTime.LocalTime(14, 0),
                            DayOfWeekId = 1,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(10, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 16L,
                            DayOfWeekId = 2,
                            IsClosed = true,
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 17L,
                            CloseTime = new NodaTime.LocalTime(21, 0),
                            DayOfWeekId = 3,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 18L,
                            CloseTime = new NodaTime.LocalTime(21, 0),
                            DayOfWeekId = 4,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 19L,
                            CloseTime = new NodaTime.LocalTime(21, 0),
                            DayOfWeekId = 5,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 20L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 6,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 21L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 7,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.DayOfWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsWeekday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_weekday");

                    b.Property<int>("IsoNumber")
                        .HasColumnType("integer")
                        .HasColumnName("iso_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("short_name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_days_of_week");

                    b.HasIndex("IsoNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_days_of_week_iso_number");

                    b.ToTable("days_of_week", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsWeekday = false,
                            IsoNumber = 0,
                            Name = "Sunday",
                            ShortName = "SUN",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            IsWeekday = true,
                            IsoNumber = 1,
                            Name = "Monday",
                            ShortName = "MON",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            IsWeekday = true,
                            IsoNumber = 2,
                            Name = "Tuesday",
                            ShortName = "TUE",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            IsWeekday = true,
                            IsoNumber = 3,
                            Name = "Wednesday",
                            ShortName = "WED",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            IsWeekday = true,
                            IsoNumber = 4,
                            Name = "Thursday",
                            ShortName = "THU",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            IsWeekday = true,
                            IsoNumber = 5,
                            Name = "Friday",
                            ShortName = "FRI",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            IsWeekday = false,
                            IsoNumber = 6,
                            Name = "Saturday",
                            ShortName = "SAT",
                            SortOrder = 7
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Media", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AltText")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("alt_text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content_type");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by_user_id");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deleted_by_user_id");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("duration_seconds");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer")
                        .HasColumnName("media_type");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<long?>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_media");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_media_created_at");

                    b.HasIndex("MediaType")
                        .HasDatabaseName("ix_media_media_type");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_media_post_id");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_media_venue_id");

                    b.ToTable("media", null, t =>
                        {
                            t.HasCheckConstraint("CK_Media_Association", "(venue_id IS NOT NULL AND post_id IS NULL) OR (venue_id IS NULL AND post_id IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("action_url");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("message");

                    b.Property<Instant?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<long>("RecipientUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("recipient_user_id");

                    b.Property<long?>("RelatedSpecialId")
                        .HasColumnType("bigint")
                        .HasColumnName("related_special_id");

                    b.Property<long?>("RelatedTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("related_tag_id");

                    b.Property<long?>("RelatedVenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("related_venue_id");

                    b.Property<long?>("SenderUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("sender_user_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_notifications_created_at");

                    b.HasIndex("RecipientUserId")
                        .HasDatabaseName("ix_notifications_recipient_user_id");

                    b.HasIndex("RelatedSpecialId")
                        .HasDatabaseName("ix_notifications_related_special_id");

                    b.HasIndex("RelatedTagId")
                        .HasDatabaseName("ix_notifications_related_tag_id");

                    b.HasIndex("RelatedVenueId")
                        .HasDatabaseName("ix_notifications_related_venue_id");

                    b.HasIndex("SenderUserId")
                        .HasDatabaseName("ix_notifications_sender_user_id");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_notifications_type");

                    b.HasIndex("RecipientUserId", "IsRead")
                        .HasDatabaseName("ix_notifications_recipient_user_id_is_read");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("resource");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_permissions_is_active");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_name");

                    b.HasIndex("Category", "Action", "Resource")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_category_action_resource");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "read",
                            Category = "Venue",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Query and view venue information",
                            DisplayName = "Read Venues",
                            IsActive = true,
                            Name = "read:venues",
                            Resource = "venues",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Action = "write",
                            Category = "Venue",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Create and update venue information",
                            DisplayName = "Write Venues",
                            IsActive = true,
                            Name = "write:venues",
                            Resource = "venues",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Action = "delete",
                            Category = "Venue",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Delete venues from the system",
                            DisplayName = "Delete Venues",
                            IsActive = true,
                            Name = "delete:venues",
                            Resource = "venues",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Action = "write",
                            Category = "Special",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Create and update special offers",
                            DisplayName = "Write Specials",
                            IsActive = true,
                            Name = "write:specials",
                            Resource = "specials",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Action = "delete",
                            Category = "Special",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Delete special offers",
                            DisplayName = "Delete Specials",
                            IsActive = true,
                            Name = "delete:specials",
                            Resource = "specials",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Action = "read",
                            Category = "Content",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Read all user-generated content and posts",
                            DisplayName = "Read Content",
                            IsActive = true,
                            Name = "read:content",
                            Resource = "content",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Action = "write",
                            Category = "Content",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Create and update content across all venues",
                            DisplayName = "Write Content",
                            IsActive = true,
                            Name = "write:content",
                            Resource = "content",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 8,
                            Action = "delete",
                            Category = "Content",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Delete inappropriate or violating content",
                            DisplayName = "Delete Content",
                            IsActive = true,
                            Name = "delete:content",
                            Resource = "content",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = 9,
                            Action = "moderate",
                            Category = "Content",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Moderate user posts and venue content",
                            DisplayName = "Moderate Content",
                            IsActive = true,
                            Name = "moderate:content",
                            Resource = "content",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = 10,
                            Action = "write",
                            Category = "Post",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Create posts in venue activity threads",
                            DisplayName = "Write Posts",
                            IsActive = true,
                            Name = "write:posts",
                            Resource = "posts",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = 11,
                            Action = "delete",
                            Category = "Post",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Delete posts from activity threads",
                            DisplayName = "Delete Posts",
                            IsActive = true,
                            Name = "delete:posts",
                            Resource = "posts",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = 12,
                            Action = "moderate",
                            Category = "Post",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Moderate posts and manage thread activity",
                            DisplayName = "Moderate Posts",
                            IsActive = true,
                            Name = "moderate:posts",
                            Resource = "posts",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = 13,
                            Action = "upload",
                            Category = "Media",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Upload photos and videos to venue profiles and posts",
                            DisplayName = "Upload Media",
                            IsActive = true,
                            Name = "upload:media",
                            Resource = "media",
                            SortOrder = 13
                        },
                        new
                        {
                            Id = 14,
                            Action = "delete",
                            Category = "Media",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Delete media content",
                            DisplayName = "Delete Media",
                            IsActive = true,
                            Name = "delete:media",
                            Resource = "media",
                            SortOrder = 14
                        },
                        new
                        {
                            Id = 15,
                            Action = "moderate",
                            Category = "Media",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Moderate media content for appropriateness",
                            DisplayName = "Moderate Media",
                            IsActive = true,
                            Name = "moderate:media",
                            Resource = "media",
                            SortOrder = 15
                        },
                        new
                        {
                            Id = 16,
                            Action = "read",
                            Category = "Tag",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Read tag definitions and assignments",
                            DisplayName = "Read Tags",
                            IsActive = true,
                            Name = "read:tags",
                            Resource = "tags",
                            SortOrder = 16
                        },
                        new
                        {
                            Id = 17,
                            Action = "write",
                            Category = "Tag",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Create and update tags for specials",
                            DisplayName = "Write Tags",
                            IsActive = true,
                            Name = "write:tags",
                            Resource = "tags",
                            SortOrder = 17
                        },
                        new
                        {
                            Id = 18,
                            Action = "delete",
                            Category = "Tag",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Delete or consolidate tags",
                            DisplayName = "Delete Tags",
                            IsActive = true,
                            Name = "delete:tags",
                            Resource = "tags",
                            SortOrder = 18
                        },
                        new
                        {
                            Id = 19,
                            Action = "moderate",
                            Category = "Tag",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Feature, hide, or manage tag usage across platform",
                            DisplayName = "Moderate Tags",
                            IsActive = true,
                            Name = "moderate:tags",
                            Resource = "tags",
                            SortOrder = 19
                        },
                        new
                        {
                            Id = 20,
                            Action = "read",
                            Category = "Vibe",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Read vibe definitions and current venue vibes",
                            DisplayName = "Read Vibes",
                            IsActive = true,
                            Name = "read:vibes",
                            Resource = "vibes",
                            SortOrder = 20
                        },
                        new
                        {
                            Id = 21,
                            Action = "write",
                            Category = "Vibe",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Create vibes in user posts",
                            DisplayName = "Write Vibes",
                            IsActive = true,
                            Name = "write:vibes",
                            Resource = "vibes",
                            SortOrder = 21
                        },
                        new
                        {
                            Id = 22,
                            Action = "moderate",
                            Category = "Vibe",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Moderate vibe content for appropriateness",
                            DisplayName = "Moderate Vibes",
                            IsActive = true,
                            Name = "moderate:vibes",
                            Resource = "vibes",
                            SortOrder = 22
                        },
                        new
                        {
                            Id = 23,
                            Action = "read",
                            Category = "VenueCategory",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Read available venue category classifications",
                            DisplayName = "Read Venue Categories",
                            IsActive = true,
                            Name = "read:venue-categories",
                            Resource = "venue-categories",
                            SortOrder = 23
                        },
                        new
                        {
                            Id = 24,
                            Action = "write",
                            Category = "VenueCategory",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Create and update venue category definitions",
                            DisplayName = "Write Venue Categories",
                            IsActive = true,
                            Name = "write:venue-categories",
                            Resource = "venue-categories",
                            SortOrder = 24
                        },
                        new
                        {
                            Id = 25,
                            Action = "delete",
                            Category = "VenueCategory",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Remove venue categories from the system",
                            DisplayName = "Delete Venue Categories",
                            IsActive = true,
                            Name = "delete:venue-categories",
                            Resource = "venue-categories",
                            SortOrder = 25
                        },
                        new
                        {
                            Id = 26,
                            Action = "read",
                            Category = "Analytics",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Access venue analytics and performance metrics",
                            DisplayName = "Read Analytics",
                            IsActive = true,
                            Name = "read:analytics",
                            Resource = "analytics",
                            SortOrder = 26
                        },
                        new
                        {
                            Id = 27,
                            Action = "read",
                            Category = "Analytics",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Access global platform analytics and insights",
                            DisplayName = "Global Analytics",
                            IsActive = true,
                            Name = "read:analytics-global",
                            Resource = "analytics-global",
                            SortOrder = 27
                        },
                        new
                        {
                            Id = 28,
                            Action = "read",
                            Category = "Notification",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Read user notifications",
                            DisplayName = "Read Notifications",
                            IsActive = true,
                            Name = "read:notifications",
                            Resource = "notifications",
                            SortOrder = 28
                        },
                        new
                        {
                            Id = 29,
                            Action = "write",
                            Category = "Notification",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Send notifications to users",
                            DisplayName = "Write Notifications",
                            IsActive = true,
                            Name = "write:notifications",
                            Resource = "notifications",
                            SortOrder = 29
                        },
                        new
                        {
                            Id = 30,
                            Action = "manage",
                            Category = "Follow",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Follow/unfollow tags and venues for notifications",
                            DisplayName = "Manage Follows",
                            IsActive = true,
                            Name = "manage:follows",
                            Resource = "follows",
                            SortOrder = 30
                        },
                        new
                        {
                            Id = 31,
                            Action = "read",
                            Category = "VenueUser",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Read venue user assignments and permissions",
                            DisplayName = "Read Venue Users",
                            IsActive = true,
                            Name = "read:venue-users",
                            Resource = "venue-users",
                            SortOrder = 31
                        },
                        new
                        {
                            Id = 32,
                            Action = "write",
                            Category = "VenueUser",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Assign users to venues and manage venue-specific permissions",
                            DisplayName = "Write Venue Users",
                            IsActive = true,
                            Name = "write:venue-users",
                            Resource = "venue-users",
                            SortOrder = 32
                        },
                        new
                        {
                            Id = 33,
                            Action = "delete",
                            Category = "VenueUser",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Remove users from venue assignments",
                            DisplayName = "Delete Venue Users",
                            IsActive = true,
                            Name = "delete:venue-users",
                            Resource = "venue-users",
                            SortOrder = 33
                        },
                        new
                        {
                            Id = 34,
                            Action = "admin",
                            Category = "System",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Full system administration access",
                            DisplayName = "System Admin",
                            IsActive = true,
                            Name = "admin:system",
                            Resource = "system",
                            SortOrder = 34
                        },
                        new
                        {
                            Id = 35,
                            Action = "config",
                            Category = "System",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Modify system configuration and settings",
                            DisplayName = "System Config",
                            IsActive = true,
                            Name = "config:system",
                            Resource = "system",
                            SortOrder = 35
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ActivityThreadId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_thread_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("content");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by_user_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("ActivityThreadId")
                        .HasDatabaseName("ix_posts_activity_thread_id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_posts_created_at");

                    b.HasIndex("DeletedByUserId")
                        .HasDatabaseName("ix_posts_deleted_by_user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_posts_user_id");

                    b.HasIndex("ActivityThreadId", "IsActive")
                        .HasDatabaseName("ix_posts_activity_thread_id_is_active");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.PostVibe", b =>
                {
                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<long>("VibeId")
                        .HasColumnType("bigint")
                        .HasColumnName("vibe_id");

                    b.HasKey("PostId", "VibeId")
                        .HasName("pk_post_vibes");

                    b.HasIndex("VibeId")
                        .HasDatabaseName("ix_post_vibes_vibe_id");

                    b.ToTable("post_vibes", (string)null);
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_roles_is_active");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Full global application administration access with complete system control",
                            DisplayName = "Administrator",
                            IsActive = true,
                            Name = "administrator",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Manage all venues, content, and platform-wide moderation",
                            DisplayName = "Content Manager",
                            IsActive = true,
                            Name = "content-manager",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Full management access for assigned venues including user management",
                            DisplayName = "Venue Owner",
                            IsActive = true,
                            Name = "venue-owner",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Manage specials and content for assigned venues",
                            DisplayName = "Venue Manager",
                            IsActive = true,
                            Name = "venue-manager",
                            SortOrder = 4
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 22
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 23
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 24
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 25
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 26
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 27
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 28
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 29
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 30
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 31
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 32
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 33
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 34
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 35
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 22
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 23
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 26
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 23
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 26
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 28
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 29
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 30
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 31
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 32
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 33
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 23
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 26
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 28
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Special", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("CronSchedule")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cron_schedule");

                    b.Property<Instant?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at");

                    b.Property<string>("DeactivatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deactivated_by_user_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<LocalDate?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<LocalTime?>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean")
                        .HasColumnName("is_recurring");

                    b.Property<int>("SpecialCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("special_category_id");

                    b.Property<LocalDate>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<LocalTime>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_id");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_specials");

                    b.HasIndex("SpecialCategoryId")
                        .HasDatabaseName("ix_specials_special_category_id");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_specials_venue_id");

                    b.ToTable("specials", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            CronSchedule = "0 21 * * 5,6",
                            Description = "Live music showcasing the best in local, regional, and national talent. Various genres from rock to jazz.",
                            EndTime = new NodaTime.LocalTime(23, 0),
                            IsActive = true,
                            IsRecurring = true,
                            SpecialCategoryId = 3,
                            StartDate = new NodaTime.LocalDate(2025, 5, 3),
                            StartTime = new NodaTime.LocalTime(21, 0),
                            Title = "Live Music Friday/Saturday",
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            CronSchedule = "0 16 * * 1-5",
                            Description = "Enjoy $1 off all draft beers and $5 house wines.",
                            EndTime = new NodaTime.LocalTime(18, 0),
                            IsActive = true,
                            IsRecurring = true,
                            SpecialCategoryId = 2,
                            StartDate = new NodaTime.LocalDate(2025, 5, 1),
                            StartTime = new NodaTime.LocalTime(16, 0),
                            Title = "Happy Hour",
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Sweet and spicy chicken sandwich with sweet n spicy sauce, lettuce, and pickles.",
                            EndDate = new NodaTime.LocalDate(2025, 5, 27),
                            EndTime = new NodaTime.LocalTime(22, 0),
                            IsActive = true,
                            IsRecurring = false,
                            SpecialCategoryId = 1,
                            StartDate = new NodaTime.LocalDate(2025, 5, 20),
                            StartTime = new NodaTime.LocalTime(11, 0),
                            Title = "Weekly Burger Special - Sweet & Spicy Chicken Sandwich",
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            CronSchedule = "0 21 * * 3",
                            Description = "Pub Trivia with first and second place prizes. Sponsored by Bacardi Oakheart.",
                            EndTime = new NodaTime.LocalTime(23, 0),
                            IsActive = true,
                            IsRecurring = true,
                            SpecialCategoryId = 3,
                            StartDate = new NodaTime.LocalDate(2025, 5, 22),
                            StartTime = new NodaTime.LocalTime(21, 0),
                            Title = "Wednesday Night Quizzo",
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            CronSchedule = "0 11 * * 2",
                            Description = "Every Tuesday is Mug Club Night. Our valued Mug club members enjoy their First beer, of their choice, on US!!",
                            EndTime = new NodaTime.LocalTime(23, 0),
                            IsActive = true,
                            IsRecurring = true,
                            SpecialCategoryId = 2,
                            StartDate = new NodaTime.LocalDate(2025, 5, 21),
                            StartTime = new NodaTime.LocalTime(11, 0),
                            Title = "Mug Club Tuesday",
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            CronSchedule = "0 10 * * 0",
                            Description = "Special brunch menu served from 10am to 2pm every Sunday.",
                            EndTime = new NodaTime.LocalTime(14, 0),
                            IsActive = true,
                            IsRecurring = true,
                            SpecialCategoryId = 1,
                            StartDate = new NodaTime.LocalDate(2025, 5, 18),
                            StartTime = new NodaTime.LocalTime(10, 0),
                            Title = "Sunday Brunch",
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            CronSchedule = "0 16 * * 2-6",
                            Description = "Enjoy our specially crafted cocktails at a reduced price.",
                            EndTime = new NodaTime.LocalTime(18, 0),
                            IsActive = true,
                            IsRecurring = true,
                            SpecialCategoryId = 2,
                            StartDate = new NodaTime.LocalDate(2025, 5, 21),
                            StartTime = new NodaTime.LocalTime(16, 0),
                            Title = "Cocktail Hour",
                            VenueId = 3L
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.SpecialCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_special_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_special_categories_name");

                    b.ToTable("special_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Food specials, appetizers, and meal deals",
                            Icon = "🍔",
                            Name = "Food",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Drink specials, happy hours, and beverage promotions",
                            Icon = "🍺",
                            Name = "Drink",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Live music, DJs, trivia, karaoke, and other events",
                            Icon = "🎵",
                            Name = "Entertainment",
                            SortOrder = 3
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.SpecialTag", b =>
                {
                    b.Property<long>("SpecialId")
                        .HasColumnType("bigint")
                        .HasColumnName("special_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("SpecialId", "TagId")
                        .HasName("pk_special_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_special_tags_tag_id");

                    b.ToTable("special_tags", (string)null);
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by_user_id");

                    b.Property<Instant?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at");

                    b.Property<string>("DeactivatedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deactivated_by_user_id");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by_user_id");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer")
                        .HasColumnName("usage_count");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_tags_is_active");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_name");

                    b.HasIndex("UsageCount")
                        .HasDatabaseName("ix_tags_usage_count");

                    b.ToTable("tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Color = "#FF6B35",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Happy hour drink specials",
                            Icon = "🍻",
                            IsActive = true,
                            Name = "happyhour",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 2L,
                            Color = "#4ECDC4",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Live music performances",
                            Icon = "🎵",
                            IsActive = true,
                            Name = "livemusic",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 3L,
                            Color = "#45B7D1",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Trivia nights and quiz events",
                            Icon = "🧠",
                            IsActive = true,
                            Name = "trivia",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 4L,
                            Color = "#FFA07A",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Karaoke nights",
                            Icon = "🎤",
                            IsActive = true,
                            Name = "karaoke",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 5L,
                            Color = "#98D8C8",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Food discounts and meal deals",
                            Icon = "🍽️",
                            IsActive = true,
                            Name = "foodspecial",
                            UsageCount = 0
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Instant?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at");

                    b.Property<long?>("DeactivatedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("bigint")
                        .HasColumnName("deactivated_by_user_id");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Instant?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_picture");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("provider_id");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("ProviderId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_provider_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            DisplayName = "davis_kolakowski",
                            Email = "davis_kolakowski@mirthsystems.com",
                            FirstName = "Davis",
                            IsActive = true,
                            LastName = "Kolakowski",
                            ProfilePicture = "https://s.gravatar.com/avatar/a23b5565a17780ebec6bc03fccd4d0f6?s=480&r=pg&d=https%3A%2F%2Fcdn.auth0.com%2Favatars%2Fda.png",
                            ProviderId = "auth0|682e1f2e2121380bbeb56dcf"
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.UserFollow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("FollowType")
                        .HasColumnType("integer")
                        .HasColumnName("follow_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("NotifyNewSpecials")
                        .HasColumnType("boolean")
                        .HasColumnName("notify_new_specials");

                    b.Property<bool>("NotifySpecialReminders")
                        .HasColumnType("boolean")
                        .HasColumnName("notify_special_reminders");

                    b.Property<bool>("NotifyVenueActivity")
                        .HasColumnType("boolean")
                        .HasColumnName("notify_venue_activity");

                    b.Property<long?>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.Property<Instant?>("UnfollowedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("unfollowed_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long?>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_user_follows");

                    b.HasIndex("TagId", "IsActive")
                        .HasDatabaseName("ix_user_follows_tag_id_is_active");

                    b.HasIndex("UserId", "FollowType")
                        .HasDatabaseName("ix_user_follows_user_id_follow_type");

                    b.HasIndex("VenueId", "IsActive")
                        .HasDatabaseName("ix_user_follows_venue_id_is_active");

                    b.HasIndex("UserId", "TagId", "FollowType")
                        .IsUnique()
                        .HasDatabaseName("ix_user_follows_user_id_tag_id_follow_type")
                        .HasFilter("is_active = true AND tag_id IS NOT NULL");

                    b.HasIndex("UserId", "VenueId", "FollowType")
                        .IsUnique()
                        .HasDatabaseName("ix_user_follows_user_id_venue_id_follow_type")
                        .HasFilter("is_active = true AND venue_id IS NOT NULL");

                    b.ToTable("user_follows", null, t =>
                        {
                            t.HasCheckConstraint("CK_UserFollow_Association", "(follow_type = 1 AND tag_id IS NOT NULL AND venue_id IS NULL) OR (follow_type = 2 AND tag_id IS NULL AND venue_id IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<long?>("AssignedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("assigned_by_user_id");

                    b.Property<Instant?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at");

                    b.Property<long?>("DeactivatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("deactivated_by_user_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("AssignedByUserId")
                        .HasDatabaseName("ix_user_roles_assigned_by_user_id");

                    b.HasIndex("DeactivatedByUserId")
                        .HasDatabaseName("ix_user_roles_deactivated_by_user_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id")
                        .HasFilter("is_active = true");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_roles_user_id_role_id")
                        .HasFilter("is_active = true");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AssignedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            IsActive = true,
                            RoleId = 1,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Venue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_id");

                    b.Property<Instant?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at");

                    b.Property<string>("DeactivatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deactivated_by_user_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("locality");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_image");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("region");

                    b.Property<string>("SecondaryAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("secondary_address");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("street_address");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by_user_id");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_venues");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_venues_category_id");

                    b.HasIndex("Location")
                        .HasDatabaseName("ix_venues_location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "GIST");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_venues_name");

                    b.ToTable("venues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 7,
                            Country = "United States",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Local craft brewery featuring house-made beers, pub fare, and live entertainment in a cozy atmosphere.",
                            Email = "info@bullfrogbrewery.com",
                            IsActive = true,
                            Locality = "Williamsport",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-77.0057192 41.240432)"),
                            Name = "Bullfrog Brewery",
                            PhoneNumber = "(570) 326-4700",
                            PostalCode = "17701",
                            Region = "PA",
                            StreetAddress = "229 W 4th St",
                            Website = "https://bullfrogbrewery.com"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 1,
                            Country = "United States",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Family-friendly restaurant and ale house serving American cuisine with a great selection of craft beers and cocktails.",
                            Email = "info@thebrickyard.net",
                            IsActive = true,
                            Locality = "Williamsport",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-77.0037646 41.2409825)"),
                            Name = "The Brickyard Restaurant & Ale House",
                            PhoneNumber = "(570) 322-3876",
                            PostalCode = "17701",
                            Region = "PA",
                            StreetAddress = "343 Pine St",
                            Website = "https://thebrickyard.net"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 2,
                            Country = "United States",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Upscale gastropub featuring craft cocktails, local beers, and elevated bar food in a sophisticated atmosphere.",
                            Email = "info@thecrookedgoose.com",
                            IsActive = true,
                            Locality = "Williamsport",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-77.0047521 41.2407201)"),
                            Name = "The Crooked Goose",
                            PhoneNumber = "(570) 360-7435",
                            PostalCode = "17701",
                            Region = "PA",
                            StreetAddress = "215 W 4th St",
                            Website = "https://thecrookedgoose.com"
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.VenueCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_venue_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_venue_categories_name");

                    b.ToTable("venue_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dining establishments offering food and beverages",
                            Icon = "🍽️",
                            Name = "Restaurant",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Venues focused on drinks and nightlife",
                            Icon = "🍸",
                            Name = "Bar",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Casual spots for coffee and light meals",
                            Icon = "☕",
                            Name = "Cafe",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Venues for dancing and late-night entertainment",
                            Icon = "🪩",
                            Name = "Nightclub",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Casual venues with food, drinks, and often live music",
                            Icon = "🍺",
                            Name = "Pub",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Venues producing wine, offering tastings, food pairings, and live music",
                            Icon = "🍷",
                            Name = "Winery",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Description = "Venues brewing their own beer, often with food and live music",
                            Icon = "🍻",
                            Name = "Brewery",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 9,
                            Description = "Sophisticated venues with cocktails, small plates, and live music",
                            Icon = "🛋️",
                            Name = "Lounge",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = 10,
                            Description = "Intimate dining venues with quality food, wine, and occasional live music",
                            Icon = "🥂",
                            Name = "Bistro",
                            SortOrder = 9
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.VenueRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<long?>("AssignedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("assigned_by_user_id");

                    b.Property<Instant?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at");

                    b.Property<long?>("DeactivatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("deactivated_by_user_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_venue_roles");

                    b.HasIndex("AssignedByUserId")
                        .HasDatabaseName("ix_venue_roles_assigned_by_user_id");

                    b.HasIndex("DeactivatedByUserId")
                        .HasDatabaseName("ix_venue_roles_deactivated_by_user_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_venue_roles_role_id");

                    b.HasIndex("VenueId", "RoleId")
                        .HasDatabaseName("ix_venue_roles_venue_id_role_id")
                        .HasFilter("is_active = true");

                    b.HasIndex("UserId", "VenueId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_venue_roles_user_id_venue_id_role_id")
                        .HasFilter("is_active = true");

                    b.ToTable("venue_roles", (string)null);
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Vibe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by_user_id");

                    b.Property<Instant?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at");

                    b.Property<string>("DeactivatedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deactivated_by_user_id");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByUserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by_user_id");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer")
                        .HasColumnName("usage_count");

                    b.HasKey("Id")
                        .HasName("pk_vibes");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_vibes_is_active");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_vibes_name");

                    b.HasIndex("UsageCount")
                        .HasDatabaseName("ix_vibes_usage_count");

                    b.ToTable("vibes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Color = "#FF6B35",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "High energy, crowded atmosphere",
                            Icon = "🔥",
                            IsActive = true,
                            Name = "busy",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 2L,
                            Color = "#4ECDC4",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Relaxed, laid-back atmosphere",
                            Icon = "😌",
                            IsActive = true,
                            Name = "chill",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 3L,
                            Color = "#45B7D1",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Fun and energetic atmosphere",
                            Icon = "🎉",
                            IsActive = true,
                            Name = "lively",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 4L,
                            Color = "#A8E6CF",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Peaceful and calm atmosphere",
                            Icon = "🤫",
                            IsActive = true,
                            Name = "quiet",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 5L,
                            Color = "#FFB6C1",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            CreatedByUserId = "system-seed",
                            Description = "Perfect for couples and intimate conversations",
                            Icon = "💕",
                            IsActive = true,
                            Name = "romantic",
                            UsageCount = 0
                        });
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.ActivityThread", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.Venue", "Venue")
                        .WithMany("ActivityThreads")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_threads_venues_venue_id");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.BusinessHours", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.DayOfWeek", "DayOfWeek")
                        .WithMany("BusinessHours")
                        .HasForeignKey("DayOfWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_business_hours_day_of_weeks_day_of_week_id");

                    b.HasOne("Pulse.Core.Data.Entities.Venue", "Venue")
                        .WithMany("BusinessHours")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_hours_venues_venue_id");

                    b.Navigation("DayOfWeek");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Media", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.Post", "Post")
                        .WithMany("MediaAttachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_media_posts_post_id");

                    b.HasOne("Pulse.Core.Data.Entities.Venue", "Venue")
                        .WithMany("MediaFiles")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_media_venues_venue_id");

                    b.Navigation("Post");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Notification", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.User", "Recipient")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("RecipientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_users_recipient_user_id");

                    b.HasOne("Pulse.Core.Data.Entities.Special", "RelatedSpecial")
                        .WithMany("RelatedNotifications")
                        .HasForeignKey("RelatedSpecialId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_notifications_specials_related_special_id");

                    b.HasOne("Pulse.Core.Data.Entities.Tag", "RelatedTag")
                        .WithMany()
                        .HasForeignKey("RelatedTagId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_notifications_tags_related_tag_id");

                    b.HasOne("Pulse.Core.Data.Entities.Venue", "RelatedVenue")
                        .WithMany("RelatedNotifications")
                        .HasForeignKey("RelatedVenueId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_notifications_venues_related_venue_id");

                    b.HasOne("Pulse.Core.Data.Entities.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_notifications_users_sender_user_id");

                    b.Navigation("Recipient");

                    b.Navigation("RelatedSpecial");

                    b.Navigation("RelatedTag");

                    b.Navigation("RelatedVenue");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Post", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.ActivityThread", "ActivityThread")
                        .WithMany("Posts")
                        .HasForeignKey("ActivityThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_activity_threads_activity_thread_id");

                    b.HasOne("Pulse.Core.Data.Entities.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_posts_users_deleted_by_user_id");

                    b.HasOne("Pulse.Core.Data.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_users_user_id");

                    b.Navigation("ActivityThread");

                    b.Navigation("DeletedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.PostVibe", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.Post", "Post")
                        .WithMany("PostVibes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_vibes_posts_post_id");

                    b.HasOne("Pulse.Core.Data.Entities.Vibe", "Vibe")
                        .WithMany("PostVibes")
                        .HasForeignKey("VibeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_vibes_vibes_vibe_id");

                    b.Navigation("Post");

                    b.Navigation("Vibe");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.RolePermission", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("Pulse.Core.Data.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Special", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.SpecialCategory", "Category")
                        .WithMany("Specials")
                        .HasForeignKey("SpecialCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_specials_special_categories_special_category_id");

                    b.HasOne("Pulse.Core.Data.Entities.Venue", "Venue")
                        .WithMany("Specials")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specials_venues_venue_id");

                    b.Navigation("Category");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.SpecialTag", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.Special", "Special")
                        .WithMany("SpecialTags")
                        .HasForeignKey("SpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_special_tags_specials_special_id");

                    b.HasOne("Pulse.Core.Data.Entities.Tag", "Tag")
                        .WithMany("SpecialTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_special_tags_tags_tag_id");

                    b.Navigation("Special");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.UserFollow", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.Tag", "Tag")
                        .WithMany("Followers")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_follows_tags_tag_id");

                    b.HasOne("Pulse.Core.Data.Entities.User", "User")
                        .WithMany("Follows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_follows_users_user_id");

                    b.HasOne("Pulse.Core.Data.Entities.Venue", "Venue")
                        .WithMany("Followers")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_follows_venues_venue_id");

                    b.Navigation("Tag");

                    b.Navigation("User");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.UserRole", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.User", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_roles_users_assigned_by_user_id");

                    b.HasOne("Pulse.Core.Data.Entities.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_roles_users_deactivated_by_user_id");

                    b.HasOne("Pulse.Core.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Pulse.Core.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("AssignedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Venue", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.VenueCategory", "Category")
                        .WithMany("Venues")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_venues_venue_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.VenueRole", b =>
                {
                    b.HasOne("Pulse.Core.Data.Entities.User", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_venue_roles_users_assigned_by_user_id");

                    b.HasOne("Pulse.Core.Data.Entities.User", "DeactivatedBy")
                        .WithMany()
                        .HasForeignKey("DeactivatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_venue_roles_users_deactivated_by_user_id");

                    b.HasOne("Pulse.Core.Data.Entities.Role", "Role")
                        .WithMany("VenueRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_venue_roles_roles_role_id");

                    b.HasOne("Pulse.Core.Data.Entities.User", "User")
                        .WithMany("VenueRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_venue_roles_users_user_id");

                    b.HasOne("Pulse.Core.Data.Entities.Venue", "Venue")
                        .WithMany("VenueRoles")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_venue_roles_venues_venue_id");

                    b.Navigation("AssignedBy");

                    b.Navigation("DeactivatedBy");

                    b.Navigation("Role");

                    b.Navigation("User");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.ActivityThread", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.DayOfWeek", b =>
                {
                    b.Navigation("BusinessHours");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Post", b =>
                {
                    b.Navigation("MediaAttachments");

                    b.Navigation("PostVibes");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");

                    b.Navigation("VenueRoles");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Special", b =>
                {
                    b.Navigation("RelatedNotifications");

                    b.Navigation("SpecialTags");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.SpecialCategory", b =>
                {
                    b.Navigation("Specials");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Tag", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("SpecialTags");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.User", b =>
                {
                    b.Navigation("Follows");

                    b.Navigation("Posts");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserRoles");

                    b.Navigation("VenueRoles");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Venue", b =>
                {
                    b.Navigation("ActivityThreads");

                    b.Navigation("BusinessHours");

                    b.Navigation("Followers");

                    b.Navigation("MediaFiles");

                    b.Navigation("RelatedNotifications");

                    b.Navigation("Specials");

                    b.Navigation("VenueRoles");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.VenueCategory", b =>
                {
                    b.Navigation("Venues");
                });

            modelBuilder.Entity("Pulse.Core.Data.Entities.Vibe", b =>
                {
                    b.Navigation("PostVibes");
                });
#pragma warning restore 612, 618
        }
    }
}
